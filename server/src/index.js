const express = require('express');\nconst cors = require('cors');\nconst path = require('path');\nconst morgan = require('morgan');\nconst dotenv = require('dotenv');\n\n// 환경 변수 로드\ndotenv.config();\n\n// 데이터베이스 연결\nconst connectDB = require('./utils/database');\nconnectDB();\n\n// 애플리케이션 생성\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// 미들웨어 설정\napp.use(cors());\napp.use(express.json());\napp.use(morgan('dev'));\n\n// 상태 확인 라우트\napp.get('/api/health', (req, res) => {\n  res.status(200).json({ status: 'ok', message: '서버가 정상적으로 실행 중입니다.' });\n});\n\n// API 라우트 정의\napp.use('/api/auth', require('./routes/authRoutes'));\napp.use('/api/users', require('./routes/userRoutes'));\napp.use('/api/equipment', require('./routes/equipmentRoutes'));\napp.use('/api/reservations', require('./routes/reservationRoutes'));\n\n// 더미 데이터 모드 (MongoDB 연결 실패 시를 대비한 폴백)\nlet useDummyData = false;\n\n// MongoDB 연결 실패 시 더미 데이터 사용\nif (useDummyData) {\n  console.log('⚠️ 더미 데이터 모드로 실행 중입니다');\n  \n  // 더미 사용자 데이터\n  const users = [\n    { id: 1, name: '김철수', email: 'user1@example.com', department: '화학과', role: 'user' },\n    { id: 2, name: '박영희', email: 'user2@example.com', department: '생물학과', role: 'user' },\n    { id: 3, name: '이지훈', email: 'user3@example.com', department: '물리학과', role: 'user' },\n    { id: 4, name: '정민지', email: 'admin@example.com', department: '관리부서', role: 'admin' },\n  ];\n\n  // 더미 장비 데이터\n  const equipment = [\n    { id: 1, name: '냉장고 1', description: '일반용 냉장고', location: '1층 실험실', color: '#3B82F6' },\n    { id: 2, name: '냉장고 2', description: '식품용 냉장고', location: '2층 실험실', color: '#10B981' },\n    { id: 3, name: '냉장고 3', description: '시약용 냉장고', location: '2층 실험실', color: '#F59E0B' },\n    { id: 4, name: '냉장고 4', description: '시료 보관용', location: '3층 실험실', color: '#EF4444' },\n    { id: 5, name: '초저온냉장고', description: '-80℃ 보관용', location: '지하 1층', color: '#8B5CF6' },\n  ];\n\n  // 더미 예약 데이터\n  const reservations = [\n    {\n      id: 1,\n      title: '시료 보관',\n      description: '생물학 실험 시료 보관',\n      userId: 1,\n      equipmentId: 1,\n      startTime: '2025-04-20T10:00:00',\n      endTime: '2025-04-20T12:00:00',\n    },\n    {\n      id: 2,\n      title: '화학 실험 보관',\n      description: '화학 실험 시약 보관',\n      userId: 2,\n      equipmentId: 2,\n      startTime: '2025-04-21T14:00:00',\n      endTime: '2025-04-21T16:00:00',\n    },\n    {\n      id: 3,\n      title: '샘플 보관',\n      description: '장기 보관용 샘플',\n      userId: 3,\n      equipmentId: 5,\n      startTime: '2025-04-22T09:00:00',\n      endTime: '2025-04-22T11:00:00',\n    },\n  ];\n\n  // 더미 API 라우트\n  app.get('/api/dummy/users', (req, res) => {\n    res.json(users);\n  });\n\n  app.get('/api/dummy/equipment', (req, res) => {\n    res.json(equipment);\n  });\n\n  app.get('/api/dummy/reservations', (req, res) => {\n    res.json(reservations);\n  });\n\n  // 더미 인증 API\n  app.post('/api/dummy/login', (req, res) => {\n    const { email, password } = req.body;\n    \n    // 간단한 인증 체크 (실제로는 비밀번호 확인 필요)\n    const user = users.find(u => u.email === email);\n    \n    if (user) {\n      // 실제 구현에서는 JWT 토큰 생성\n      res.json({ \n        token: 'dummy_jwt_token', \n        user: { \n          id: user.id,\n          name: user.name,\n          email: user.email,\n          department: user.department,\n          role: user.role\n        } \n      });\n    } else {\n      res.status(401).json({ message: '이메일 또는 비밀번호가 올바르지 않습니다.' });\n    }\n  });\n}\n\n// 정적 파일 제공 (프로덕션 환경)\nif (process.env.NODE_ENV === 'production') {\n  // 클라이언트 빌드 결과물 제공\n  app.use(express.static(path.join(__dirname, '../../client/dist')));\n  \n  // 클라이언트 라우팅을 위한 설정\n  app.get('*', (req, res) => {\n    res.sendFile(path.join(__dirname, '../../client/dist', 'index.html'));\n  });\n}\n\n// 서버 시작\napp.listen(PORT, () => {\n  console.log(`서버가 http://localhost:${PORT} 에서 실행 중입니다.`);\n});\n\nmodule.exports = app;\n